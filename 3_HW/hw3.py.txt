# Standard imports
import os

# Third-party imports
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import KFold
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# This updates plotting styles this is seaborns plotting styles
sns.set()
# print(df.head())

df = pd.read_csv('auto-mpg.data', delim_whitespace=True, header=None)
df.columns = ['mpg', 'cylinders', 'displacement', 'horsepower',
              'weight', 'acceleration', 'model year', 'origin', 'car name']

#! Dropping columns I do NOT want 
df = df.drop(columns=['model year', 'acceleration', 'car name', 'origin', 'cylinders',])

#! Dropping rows with missing values
df['horsepower'].replace('?', np.nan, inplace=True)
df['horsepower'] = df['horsepower'].astype(float)
df_clean = df.dropna()
# df_clean

sns.pairplot(df_clean[['mpg', 'horsepower', 'weight', 'displacement']])
plt.show()

# This is to define X (features) and Y (target)
X = df_clean[['horsepower', 'weight', 'displacement']]
y = df_clean['mpg']

kf = KFold(n_splits=10, shuffle=True, random_state=42)

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

fold_results = []

for fold, (train_idx, test_idx) in enumerate(kf.split(X_scaled), 1):
    X_train, X_test = X_scaled[train_idx], X_scaled[test_idx]
    y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]

    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    coefs = model.coef_

    fold_results.append({
        'Fold': fold,
        'Horsepower Coef': coefs[0],
        'Weight Coef': coefs[1],
        'Displacement Coef': coefs[2],
        'RMSE': rmse
    })

results_df = pd.DataFrame(fold_results)
print(results_df)